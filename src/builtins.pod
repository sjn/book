=head0 Built-in types, operators and methods
Z<sec:builtins>

=for authors

I'm not sure if this qualifies as a chapter on its own. I could imagine
putting this at the end of the first chapter, or squeeze the sections into
chapter 1 where appropriate.

=end for

X<type>
X<coercion>

Many operators work on a particular I<type> of data. If the type of the
operands differs from the type of the operand, Perl will make copies of the
operands and convert them to the needed types.  For example, C<$a + $b> will
convert a copy of both C<$a> and C<$b> to numbers (unless they are numbers
already). This implicit conversion is called I<coercion>.

Besides operators, other syntactic elements coerce their elements: C<if> and
C<while> coerce to truth values (C<Bool>), C<for> views things as lists, and so
on.

=for author

I've explained this as a form of context in the Modern Perl book; it may work
here too.

=end for

=head1 Numbers

Sometimes coercion is transparent.  Perl 6 has several numeric types which can
intermix freely--such as subtracting a floating point value from an integer, as
C<123 - 12.1e1>.

The most important types are:

=over

=item Int

X<Int>
X<types, Int>

C<Int> objects store integer numbers of arbitrary size. If you write a literal
that consists only of digits, such as C<12>, it is an C<Int>.

=item Num

X<Num>
X<types, Num>

C<Num> is the floating point type. It stores sign, mantissa, and exponent, each
with a fixed width. Calculations involving C<Num> numbers are usually quite
fast, though subject to limited precision.

Numbers in scientific notation such as C<6.022e23> are of type C<Num>.

=item Rat

X<Rat>
X<rational type>
X<types, rational>
X<types, Rat>

C<Rat>, short for I<rational>, stores fractional numbers without loss of
precision.  It does so by tracking its numerator and denominator as integers,
so mathematical operations on C<Rat>s with large components can become quite
slow.  For this reason, rationals with large denominators automatically degrade
to C<Num>.

Writing a fractional value with a dot as the decimal separator, such as
C<3.14>, produces a C<Rat>.

=item Complex

X<Complex>
X<types, Complex>

C<Complex> numbers have two parts: a real part and an imaginary part. If either
part is C<NaN>, then the entire number may possibly be C<NaN>.

=for author

What is C<i>, if not sqrt(-1)?

=end for

Numbers in the form C<a + bi>, where C<bi> is the imaginary component, are of
type C<Complex>.

=back

The following operators are available for all number types:

=begin table Binary numeric operators

=headrow

=row

=cell Operator

=cell Description

=bodyrows

=row

=cell C<**>

=cell exponentiation: C<$a**$b> is C<$a> to the power of C<$b>

=row

=cell C<*>

=cell multiplication

=row

=cell C</>

=cell division

=row

=cell C<div>

=cell integer division

=row

=cell C<%>

=cell modulo (remainder after division)

=row

=cell C<+>

=cell addition

=row

=cell C<->

=cell subtraction

=end table

=begin table Unary numeric operators

=headrow

=row

=cell Operator

=cell Description

=bodyrows

=row

=cell C<+>

=cell conversion to number

=row

=cell C<->

=cell negation

=end table

Most mathematical functions are available both as methods and functions, so
you can write both C<(-5).abs> and C<abs(-5)>.

=begin table Mathematical functions and methods

=headrow

=row

=cell Method

=cell Description

=bodyrows

=row

=cell C<abs>

=cell absolute value

=row

=cell C<sqrt>

=cell square root

=row

=cell C<log>

=cell natural logarithm

=row

=cell C<log10>

=cell logarithm to base 10

=row

=cell C<ceil>

=cell rounding up to an integer

=row

=cell C<floor>

=cell rounding down to an integer

=row

=cell C<round>

=cell rounding to next integer

=row

=cell C<sign>

=cell -1 for negative, 0 for zero, 1 for positive values

=end table

X<trigonometric functions>
X<operators, trigonometry>
X<units>

=for author

Gradians?  Are these functions also methods?

=end for

The trigonometric functions C<sin>, C<cos>, C<tan>, C<asin>, C<acos>, C<atan>,
C<sec>, C<cosec>, C<cotan>, C<asec>, C<acosec>, C<acotan>, C<sinh>, C<cosh>,
C<tanh>, C<asinh>, C<acosh>, C<atanh>, C<sech>, C<cosech>, C<cotanh>, C<asech>,
C<acosech> and C<acotanh> work in units of radians by default. You may specify
the unit with an argument of C<Degrees>, C<Gradians> or C<Circles>. For
example, C<180.sin(Degrees)> is approximately C<0>.

=head1 Strings

X<strings>
X<Str>
X<types, Str>
X<Buf>
X<types, Buf>

Strings stored as C<Str> are sequences of characters, independent of character
encoding. The C<Buf> type is available for storing binary data. The C<encode>
method converts a C<Str> to C<Buf>. C<decode> goes the other direction.

The following operations are available for strings:

=begin table Binary string operators

=headrow

=row

=cell Operator

=cell Description

=bodyrows

=row

=cell C<~>

=cell concatenation: C<'a' ~ 'b'> is C<'ab'>

=row

=cell C<x>

=cell replication: C<'a' x 2> is C<'aa'>

=end table

=begin table Unary string operators

=headrow

=row

=cell Operator

=cell Description

=bodyrows

=row

=cell C<~>

=cell conversion to string: C<~1> becomes C<'1'>

=end table

=begin table String methods/functions

=headrow

=row

=cell Method/function

=cell Description

=bodyrows

=row

=cell C<.chomp>

=cell remove trailing newline

=row

=cell C<.substr($start, $length)>

=cell extract a part of the string. C<$length> defaults to the rest of the string

=row

=cell C<.chars>

=cell number of characters in the string

=row

=cell C<.uc>

=cell upper case

=row

=cell C<.lc>

=cell lower case

=row

=cell C<.ucfirst>

=cell convert first character to upper case

=row

=cell C<.lcfirst>

=cell convert first character to lower case

=row

=cell C<.capitalize>

=cell convert the first character of each word to upper case, and all other characters to lower case

=end table

=for author

TODO: Str and Buf operators, methods

=end for

=head1 Bool

X<Bool>
X<types, Bool>

A Boolean value is either C<True> or C<False>.  Any value can coerce to a
boolean in boolean context. The rules for deciding if a value is true or false
depend on the type of the value:

=over

=item Strings

Empty strings and C<"0"> evaluate to C<False>.  All other strings evaluate to
C<True>.

=item Numbers

All numbers except zero evaluate to C<True>.

=item Lists and Hashes

Container types such as lists and hashes evaluate to C<False> if they are
empty, and to C<True> if they contain at least one value.

=back

Constructs such as C<if> automatically evaluate their conditions in
boolean context. You can force an explicit boolean context by
putting a C<?> in front of an expression. The C<!> prefix negates
the boolean value.

=begin programlisting

    my $num = 5;

    # implicit boolean context
    if $num { say "True" }

    # explicit boolean context
    my $bool    = ?$num;

    # negated boolean context
    my $not_num = !$num;

=end programlisting
